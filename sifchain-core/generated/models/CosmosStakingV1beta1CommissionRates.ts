/* tslint:disable */
/* eslint-disable */
/**
 * Sifchain - gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 * @export
 * @interface CosmosStakingV1beta1CommissionRates
 */
export interface CosmosStakingV1beta1CommissionRates {
  /**
   * rate is the commission rate charged to delegators, as a fraction.
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  rate?: string;
  /**
   * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  maxRate?: string;
  /**
   * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  maxChangeRate?: string;
}

export function CosmosStakingV1beta1CommissionRatesFromJSON(
  json: any,
): CosmosStakingV1beta1CommissionRates {
  return CosmosStakingV1beta1CommissionRatesFromJSONTyped(json, false);
}

export function CosmosStakingV1beta1CommissionRatesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CosmosStakingV1beta1CommissionRates {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    rate: !exists(json, "rate") ? undefined : json["rate"],
    maxRate: !exists(json, "max_rate") ? undefined : json["max_rate"],
    maxChangeRate: !exists(json, "max_change_rate")
      ? undefined
      : json["max_change_rate"],
  };
}

export function CosmosStakingV1beta1CommissionRatesToJSON(
  value?: CosmosStakingV1beta1CommissionRates | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    rate: value.rate,
    max_rate: value.maxRate,
    max_change_rate: value.maxChangeRate,
  };
}
