/* tslint:disable */
/* eslint-disable */
/**
 * Sifchain - gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  InlineResponse20035DelegationResponse,
  InlineResponse20035DelegationResponseFromJSON,
  InlineResponse20035DelegationResponseFromJSONTyped,
  InlineResponse20035DelegationResponseToJSON,
} from "./";

/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegationResponse
 */
export interface CosmosStakingV1beta1QueryDelegationResponse {
  /**
   *
   * @type {InlineResponse20035DelegationResponse}
   * @memberof CosmosStakingV1beta1QueryDelegationResponse
   */
  delegationResponse?: InlineResponse20035DelegationResponse;
}

export function CosmosStakingV1beta1QueryDelegationResponseFromJSON(
  json: any,
): CosmosStakingV1beta1QueryDelegationResponse {
  return CosmosStakingV1beta1QueryDelegationResponseFromJSONTyped(json, false);
}

export function CosmosStakingV1beta1QueryDelegationResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CosmosStakingV1beta1QueryDelegationResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    delegationResponse: !exists(json, "delegation_response")
      ? undefined
      : InlineResponse20035DelegationResponseFromJSON(
          json["delegation_response"],
        ),
  };
}

export function CosmosStakingV1beta1QueryDelegationResponseToJSON(
  value?: CosmosStakingV1beta1QueryDelegationResponse | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    delegation_response: InlineResponse20035DelegationResponseToJSON(
      value.delegationResponse,
    ),
  };
}
