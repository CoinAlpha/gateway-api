/* tslint:disable */
/* eslint-disable */
/**
 * Sifchain - gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey,
  MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKeyFromJSON,
  MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKeyFromJSONTyped,
  MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKeyToJSON,
} from "./";

/**
 * Counterparty defines the counterparty chain associated with a connection end.
 * @export
 * @interface IbcCoreConnectionV1Counterparty
 */
export interface IbcCoreConnectionV1Counterparty {
  /**
   * identifies the client on the counterparty chain associated with a given
   * connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  clientId?: string;
  /**
   * identifies the connection end on the counterparty chain associated with a
   * given connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  connectionId?: string;
  /**
   *
   * @type {MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  prefix?: MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey;
}

export function IbcCoreConnectionV1CounterpartyFromJSON(
  json: any,
): IbcCoreConnectionV1Counterparty {
  return IbcCoreConnectionV1CounterpartyFromJSONTyped(json, false);
}

export function IbcCoreConnectionV1CounterpartyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): IbcCoreConnectionV1Counterparty {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    clientId: !exists(json, "client_id") ? undefined : json["client_id"],
    connectionId: !exists(json, "connection_id")
      ? undefined
      : json["connection_id"],
    prefix: !exists(json, "prefix")
      ? undefined
      : MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKeyFromJSON(
          json["prefix"],
        ),
  };
}

export function IbcCoreConnectionV1CounterpartyToJSON(
  value?: IbcCoreConnectionV1Counterparty | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    client_id: value.clientId,
    connection_id: value.connectionId,
    prefix: MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKeyToJSON(
      value.prefix,
    ),
  };
}
