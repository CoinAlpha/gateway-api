/* tslint:disable */
/* eslint-disable */
/**
 * Sifchain - gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeights,
  ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeightsFromJSON,
  ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeightsFromJSONTyped,
  ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeightsToJSON,
} from "./";

/**
 * PoolParams defined the parameters that will be managed by the pool governance
 * in the future. This params are not managed by the chain governanace.
 * Instead they will be managed by the token holders of the pool.
 * The pool's token holders are specified in future_pool_governor.
 * @export
 * @interface OsmosisGammV1beta1QueryPoolParamsResponseParams
 */
export interface OsmosisGammV1beta1QueryPoolParamsResponseParams {
  /**
   *
   * @type {string}
   * @memberof OsmosisGammV1beta1QueryPoolParamsResponseParams
   */
  swapFee?: string;
  /**
   *
   * @type {string}
   * @memberof OsmosisGammV1beta1QueryPoolParamsResponseParams
   */
  exitFee?: string;
  /**
   *
   * @type {ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeights}
   * @memberof OsmosisGammV1beta1QueryPoolParamsResponseParams
   */
  smoothWeightChangeParams?: ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeights;
  /**
   *
   * @type {Date}
   * @memberof OsmosisGammV1beta1QueryPoolParamsResponseParams
   */
  startTime?: Date;
}

export function OsmosisGammV1beta1QueryPoolParamsResponseParamsFromJSON(
  json: any,
): OsmosisGammV1beta1QueryPoolParamsResponseParams {
  return OsmosisGammV1beta1QueryPoolParamsResponseParamsFromJSONTyped(
    json,
    false,
  );
}

export function OsmosisGammV1beta1QueryPoolParamsResponseParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): OsmosisGammV1beta1QueryPoolParamsResponseParams {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    swapFee: !exists(json, "swapFee") ? undefined : json["swapFee"],
    exitFee: !exists(json, "exitFee") ? undefined : json["exitFee"],
    smoothWeightChangeParams: !exists(json, "smoothWeightChangeParams")
      ? undefined
      : ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeightsFromJSON(
          json["smoothWeightChangeParams"],
        ),
    startTime: !exists(json, "start_time")
      ? undefined
      : new Date(json["start_time"]),
  };
}

export function OsmosisGammV1beta1QueryPoolParamsResponseParamsToJSON(
  value?: OsmosisGammV1beta1QueryPoolParamsResponseParams | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    swapFee: value.swapFee,
    exitFee: value.exitFee,
    smoothWeightChangeParams: ParametersForChangingTheWeightsInABalancerPoolSmoothlyFromAStartWeightAndEndWeightOverAPeriodOfTimeCurrentlyTheOnlySmoothChangeSupportedIsLinearChangingBetweenTheTwoWeightsButMoreTypesMayBeAddedInTheFutureWhenTheseParametersAreSetTheWeightWTForPoolTimeTIsTheFollowingTStartTimeWTInitialPoolWeightsStartTimeTStartTimeDurationWTInitialPoolWeightsTStartTimeTargetPoolWeightsInitialPoolWeightsDurationTStartTimeDurationWTTargetPoolWeightsToJSON(
      value.smoothWeightChangeParams,
    ),
    start_time:
      value.startTime === undefined ? undefined : value.startTime.toISOString(),
  };
}
